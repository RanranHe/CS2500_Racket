;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname |10.20 homework|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;;=======Problem 1=======;;
#|
values
1. (list f)
2. f
3. (list f 10 10)
|#



;;=======Problem 3=======;;

;; tabulate : [Number -> Number] Number -> [List-of Number]
;; tabulates between n and 0 (inclusive) in a list using the given operator
(define (tebulate op n)
  (cond [(= n 0) (list (op 0))]
        [else (cons (op n)
                    (tebulate op (sub1 n)))]))

(check-expect (tebulate + 0) (list 0))
(check-expect (tebulate - 3) (list -3 -2 -1 0))

;; tabu-sqr : Number -> [List-of Number]
;; tebulate sqr between n and 0 (inclusive) in a list
(define (tabu-sqr n)
  (tebulate sqr n))

(check-expect (tabu-sqr 0) (list 0))
(check-expect (tabu-sqr 3) (list 9 4 1 0))

;; tabu-tan : Number -> [List-of Number]
;; tebulate between n and 0 (inclusive) in a list
(define (tabu-tan n)
  (tebulate tan n))

(check-expect (tabu-tan 0) (list 0))

;;=======Problem 4=======;;

;; fold1 : [Number -> Number] [List-of Number] -> Number
;; compute the numbers in the list by using the given operator
(define (fold1 op l)
  (cond [(empty? l) 0]
        [else (op (first l)
                  (fold1 op (rest l)))]))

(check-expect (fold1 + '(1 2 3 4)) 10)
(check-expect (fold1 - '()) 0)

;; fold2 : [Number -> Number] [List-of Number] -> Number
;; compute the numbers in the list by using the given operator
(define (fold1 op l)
  (cond [(empty? l) 0]
        [else (op (first l)
                  (fold1 op (rest l)))]))

(check-expect (fold1 + '(1 2 3 4)) 10)
(check-expect (fold1 - '()) 0)

